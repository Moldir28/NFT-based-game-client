{"version":3,"sources":["assets/twitter-logo.svg"," constants.js","Components/LoadingIndicator/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","Arena","characterNFT","setCharacterNFT","useState","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","a","console","log","attackBoss","attackTxn","wait","setTimeout","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","MyEpicGame","abi","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","on","off","id","src","alt","value","max","onClick","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","length","account","connectWalletAction","alert","fetchNFTMetadata","provider","checkIfUserHasNFT","txn","renderContent","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.125ba71a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xbFb408f980BF61Fcea4971c4b1FCf2c1826A1CF1';\n\nconst transformCharacterData = (characterData) => {\n    return {\n        name: characterData.name,\n        imageURI: characterData.imageURI,\n        hp: characterData.hp.toNumber(),\n        maxHp: characterData.maxHp.toNumber(),\n        attackDamage: characterData.attackDamage.toNumber(),\n    };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../ constants';\nimport MyEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator/index';\n\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n    const [gameContract, setGameContract] = useState(null);\n    const [boss, setBoss] = useState(null);\n    const [attackState, setAttackState] = useState(\"\");\n    const [showToast, setShowToast] = useState(false);\n\n    const runAttackAction = async () => {\n        try {\n            if (gameContract) {\n                setAttackState(\"Attacking\");\n                console.log(\"Attacking boss ...\");\n                const attackTxn = await gameContract.attackBoss();\n                await attackTxn.wait();\n                console.log(\"attackTxn: \", attackTxn);\n                setAttackState(\"hit\");\n\n                setShowToast(true);\n                setTimeout(() => {\n                    setShowToast(false);\n                }, 5000);\n            }\n        } catch (error) {\n            console.log(\"Error attacking boss:\", error);\n            setAttackState(\"\");\n        }\n    };\n\n    useEffect(() => {\n        const { ethereum } = window;\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                MyEpicGame.abi,\n                signer\n            );\n\n            setGameContract(gameContract);\n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n\n    useEffect(() => {\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss();\n            console.log('Boss:', bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            const bossHp = newBossHp.toNumber();\n            const playerHp = newPlayerHp.toNumber();\n\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n            setBoss((prevState) => {\n                return { ...prevState, hp: bossHp };\n            });\n\n            setCharacterNFT((prevState) => {\n                return { ...prevState, hp: playerHp };\n            });\n        };\n\n        if (gameContract) {\n            fetchBoss();\n            gameContract.on('AttackComplete', onAttackComplete);\n        }\n        return () => {\n            if (gameContract) {\n                gameContract.off('AttackComplete', onAttackComplete);\n            }\n        }\n    }, [gameContract]);\n\n\n\n\n\n    return (\n        <div className=\"arena-container\">\n            {/* Replace your Boss UI with this */}\n            {boss && characterNFT && (\n                <div id=\"toast\" className={showToast ? 'show' : ''}>\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n                </div>\n            )}\n\n            {boss && (\n                <div className=\"boss-container\">\n                    <div className={`boss-content ${attackState}`}>\n                        <h2>🔥 {boss.name} 🔥</h2>\n                        <div className=\"image-content\">\n                            <img src={`https://cloudflare-ipfs.com/ipfs/${boss.imageURI}`} alt={`Boss ${boss.name}`} />\n                            <div className=\"health-bar\">\n                                <progress value={boss.hp} max={boss.maxHp} />\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"attack-container\">\n                        <button className=\"cta-button\" onClick={runAttackAction}>\n                            {`💥 Attack ${boss.name}`}\n                        </button>\n                    </div>\n                    {attackState == \"attacking\" && (\n                        <div className=\"loading-indicator\">\n                            <LoadingIndicator />\n                            <p>Attacking ⚔️</p>\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* Character NFT */}\n            {characterNFT && (\n                <div className=\"players-container\">\n                    <div className=\"player-container\">\n                        <h2>Your Character</h2>\n                        <div className=\"player\">\n                            <div className=\"image-content\">\n                                <h2>{characterNFT.name}</h2>\n                                <img\n                                    src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                                    alt={`Character ${characterNFT.name}`}\n                                />\n                                <div className=\"health-bar\">\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                                </div>\n                            </div>\n                            <div className=\"stats\">\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n        </div>\n    );\n};\n\nexport default Arena;\n\n","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './ constants';\n\nimport MyEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from \"ethers\";\n\nimport LoadingIndicator from './Components/LoadingIndicator/index'\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have a Metanask\");\n        setIsLoading(false);\n        return;\n      } else {\n        console.log(\"We have ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account: \", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    }\n    catch (error) {\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />\n    }\n\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://media3.giphy.com/media/3oKHWjEarwxOfxLHQ4/giphy.gif?cid=ecf05e477go8qr9iozum92vgnzf17w0uzcp3d5rim7woturp&rid=giphy.gif&ct=g\" alt=\"Spongebob Gif\"\n          />\n          <button className=\"cta-button connect-wallet-button\" onClick={connectWalletAction}>Connect Wallet to get started</button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      <SelectCharacter setCharacterNFT={setCharacterNFT} />\n    }\n    else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n    }\n  }\n\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"get Metamask!\")\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts', })\n      console.log(\"Connected\", accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount: \", currentAccount)\n      fetchNFTMetadata();\n    }\n  }, [currentAccount])\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}